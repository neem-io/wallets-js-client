/**
 * Wallet
 * Integrate Neem Wallet APIs into your ecosystem to provide your customer the ability to create wallets, set up a financial PIN, ability to manage their wallets and have on request visibility over their balances.
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* DepositWithdraw service.
* @module api/DepositWithdrawApi
* @version 1.0.3
*/
export default class DepositWithdrawApi {

    /**
    * Constructs a new DepositWithdrawApi. 
    * @alias module:api/DepositWithdrawApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cashIn operation.
     * @callback module:api/DepositWithdrawApi~cashInCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cash In
     * @param {String} walletId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xNeemPartnerId 
     * @param {String} opts.xNeemID 
     * @param {String} opts.contentType 
     * @param {Object.<String, Object>} opts.body 
     * @param {module:api/DepositWithdrawApi~cashInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cashIn(walletId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling cashIn");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Neem-Partner-Id': opts['xNeemPartnerId'],
        'X-Neem-ID': opts['xNeemID'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/cash-in/{walletId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashInInquiry operation.
     * @callback module:api/DepositWithdrawApi~cashInInquiryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cash In Inquiry
     * @param {String} walletId 
     * @param {String} endToEndIdentification 
     * @param {String} amount 
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency 
     * @param {Array.<Object>} opts.extendedProperties 
     * @param {module:api/DepositWithdrawApi~cashInInquiryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cashInInquiry(walletId, endToEndIdentification, amount, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling cashInInquiry");
      }
      // verify the required parameter 'endToEndIdentification' is set
      if (endToEndIdentification === undefined || endToEndIdentification === null) {
        throw new Error("Missing the required parameter 'endToEndIdentification' when calling cashInInquiry");
      }
      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling cashInInquiry");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
        'EndToEndIdentification': endToEndIdentification,
        'Amount': amount,
        'Currency': opts['currency'],
        'ExtendedProperties': this.apiClient.buildCollectionParam(opts['extendedProperties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/cash-in/inquiry/{walletId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashOut operation.
     * @callback module:api/DepositWithdrawApi~cashOutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cash Out
     * @param {String} walletId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xNeemPartnerId 
     * @param {String} opts.xNeemNonce 
     * @param {String} opts.xNeemOTPCode 
     * @param {String} opts.contentType 
     * @param {Object.<String, Object>} opts.body 
     * @param {module:api/DepositWithdrawApi~cashOutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cashOut(walletId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling cashOut");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Neem-Partner-Id': opts['xNeemPartnerId'],
        'X-Neem-Nonce': opts['xNeemNonce'],
        'X-Neem-OTP-Code': opts['xNeemOTPCode'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/cash-out/{walletId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashOutInquiry operation.
     * @callback module:api/DepositWithdrawApi~cashOutInquiryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cash Out Inquiry
     * @param {String} walletId 
     * @param {String} endToEndIdentification 
     * @param {String} amount 
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency 
     * @param {Array.<Object>} opts.extendedProperties 
     * @param {module:api/DepositWithdrawApi~cashOutInquiryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cashOutInquiry(walletId, endToEndIdentification, amount, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling cashOutInquiry");
      }
      // verify the required parameter 'endToEndIdentification' is set
      if (endToEndIdentification === undefined || endToEndIdentification === null) {
        throw new Error("Missing the required parameter 'endToEndIdentification' when calling cashOutInquiry");
      }
      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling cashOutInquiry");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
        'EndToEndIdentification': endToEndIdentification,
        'Amount': amount,
        'Currency': opts['currency'],
        'ExtendedProperties': this.apiClient.buildCollectionParam(opts['extendedProperties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/cash-out/inquiry/{walletId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
