/**
 * Wallet
 * Integrate Neem Wallet APIs into your ecosystem to provide your customer the ability to create wallets, set up a financial PIN, ability to manage their wallets and have on request visibility over their balances.
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Onboarding service.
* @module api/OnboardingApi
* @version 1.0.3
*/
export default class OnboardingApi {

    /**
    * Constructs a new OnboardingApi. 
    * @alias module:api/OnboardingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAccount operation.
     * @callback module:api/OnboardingApi~createAccountCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Account
     * @param {Object} opts Optional parameters
     * @param {String} opts.xNeemPartnerId 
     * @param {String} opts.xNeemOTP 
     * @param {String} opts.contentType 
     * @param {Object.<String, Object>} opts.body 
     * @param {module:api/OnboardingApi~createAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createAccount(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Neem-Partner-Id': opts['xNeemPartnerId'],
        'X-Neem-OTP': opts['xNeemOTP'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMpin operation.
     * @callback module:api/OnboardingApi~createMpinCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Mpin
     * @param {String} walletId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xNeemPartnerId 
     * @param {String} opts.xNeemID 
     * @param {String} opts.contentType 
     * @param {Object.<String, Object>} opts.body 
     * @param {module:api/OnboardingApi~createMpinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createMpin(walletId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling createMpin");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Neem-Partner-Id': opts['xNeemPartnerId'],
        'X-Neem-ID': opts['xNeemID'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/create-mpin/{walletId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/OnboardingApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType 
     * @param {Object.<String, Object>} opts.body 
     * @param {module:api/OnboardingApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    login(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
