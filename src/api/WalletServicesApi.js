/**
 * Wallet
 * Integrate Neem Wallet APIs into your ecosystem to provide your customer the ability to create wallets, set up a financial PIN, ability to manage their wallets and have on request visibility over their balances.
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* WalletServices service.
* @module api/WalletServicesApi
* @version 1.0.3
*/
export default class WalletServicesApi {

    /**
    * Constructs a new WalletServicesApi. 
    * @alias module:api/WalletServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountLookup operation.
     * @callback module:api/WalletServicesApi~accountLookupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account Lookup
     * @param {String} walletId 
     * @param {String} endToEndIdentification 
     * @param {String} schemeName 
     * @param {String} xNeemCNIC 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xNeemPartnerId 
     * @param {String} opts.contentType 
     * @param {module:api/WalletServicesApi~accountLookupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    accountLookup(walletId, endToEndIdentification, schemeName, xNeemCNIC, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling accountLookup");
      }
      // verify the required parameter 'endToEndIdentification' is set
      if (endToEndIdentification === undefined || endToEndIdentification === null) {
        throw new Error("Missing the required parameter 'endToEndIdentification' when calling accountLookup");
      }
      // verify the required parameter 'schemeName' is set
      if (schemeName === undefined || schemeName === null) {
        throw new Error("Missing the required parameter 'schemeName' when calling accountLookup");
      }
      // verify the required parameter 'xNeemCNIC' is set
      if (xNeemCNIC === undefined || xNeemCNIC === null) {
        throw new Error("Missing the required parameter 'xNeemCNIC' when calling accountLookup");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
        'EndToEndIdentification': endToEndIdentification,
        'SchemeName': schemeName
      };
      let headerParams = {
        'X-Neem-Partner-Id': opts['xNeemPartnerId'],
        'Content-Type': opts['contentType'],
        'X-Neem-CNIC': xNeemCNIC
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/account/{walletId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUpgrade operation.
     * @callback module:api/WalletServicesApi~accountUpgradeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account Upgrade
     * @param {String} walletId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xNeemPartnerId 
     * @param {String} opts.xNeemID 
     * @param {String} opts.contentType 
     * @param {Object.<String, Object>} opts.body 
     * @param {module:api/WalletServicesApi~accountUpgradeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    accountUpgrade(walletId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling accountUpgrade");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Neem-Partner-Id': opts['xNeemPartnerId'],
        'X-Neem-ID': opts['xNeemID'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/upgrade/{walletId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1WalletsValidateOtpPost operation.
     * @callback module:api/WalletServicesApi~apiV1WalletsValidateOtpPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate OTP
     * @param {Object} opts Optional parameters
     * @param {String} opts.xNeemPartnerId 
     * @param {String} opts.contentType 
     * @param {Object.<String, Object>} opts.body 
     * @param {module:api/WalletServicesApi~apiV1WalletsValidateOtpPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1WalletsValidateOtpPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Neem-Partner-Id': opts['xNeemPartnerId'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/validate-otp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the balanceInquiry operation.
     * @callback module:api/WalletServicesApi~balanceInquiryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Balance Inquiry
     * @param {Number} walletId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xNeemPartnerId 
     * @param {String} opts.xNeemID 
     * @param {Number} opts.endToEndIdentification 
     * @param {String} opts.schemeName 
     * @param {Array.<Object>} opts.extendedProperties 
     * @param {module:api/WalletServicesApi~balanceInquiryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    balanceInquiry(walletId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling balanceInquiry");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
        'endToEndIdentification': opts['endToEndIdentification'],
        'schemeName': opts['schemeName'],
        'extendedProperties': this.apiClient.buildCollectionParam(opts['extendedProperties'], 'multi')
      };
      let headerParams = {
        'X-Neem-Partner-Id': opts['xNeemPartnerId'],
        'X-Neem-ID': opts['xNeemID']
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/balance/{walletId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeMpin operation.
     * @callback module:api/WalletServicesApi~changeMpinCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change MPIN
     * @param {String} walletId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xNeemPartnerId 
     * @param {String} opts.xNeemID 
     * @param {String} opts.xNeemOTP 
     * @param {String} opts.contentType 
     * @param {Object.<String, Object>} opts.body 
     * @param {module:api/WalletServicesApi~changeMpinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    changeMpin(walletId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling changeMpin");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Neem-Partner-Id': opts['xNeemPartnerId'],
        'X-Neem-ID': opts['xNeemID'],
        'X-Neem-OTP': opts['xNeemOTP'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/change-mpin/{walletId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateOtp operation.
     * @callback module:api/WalletServicesApi~initiateOtpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate OTP
     * @param {Object} opts Optional parameters
     * @param {String} opts.xNeemPartnerId 
     * @param {String} opts.contentType 
     * @param {Object.<String, Object>} opts.body 
     * @param {module:api/WalletServicesApi~initiateOtpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    initiateOtp(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Neem-Partner-Id': opts['xNeemPartnerId'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/initiate-otp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionHistory operation.
     * @callback module:api/WalletServicesApi~transactionHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transaction History
     * @param {Number} walletId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xNeemPartnerId 
     * @param {String} opts.xNeemID 
     * @param {Number} opts.endToEndIdentification 
     * @param {Number} opts.schemeName 
     * @param {String} opts.fromDate 
     * @param {String} opts.toDate 
     * @param {Array.<Object>} opts.extendedProperties 
     * @param {module:api/WalletServicesApi~transactionHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    transactionHistory(walletId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling transactionHistory");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
        'endToEndIdentification': opts['endToEndIdentification'],
        'schemeName': opts['schemeName'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'extendedProperties': this.apiClient.buildCollectionParam(opts['extendedProperties'], 'multi')
      };
      let headerParams = {
        'X-Neem-Partner-Id': opts['xNeemPartnerId'],
        'X-Neem-ID': opts['xNeemID']
      };
      let formParams = {
      };

      let authNames = ['oAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallets/transaction-history/{walletId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
